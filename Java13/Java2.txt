1. 如何遍历Map的key集, value集, key-value集, 使用上泛型
Map<String, Integer> map = new HashMap<String, Integer>();
map.put("AA", 123);....


// 遍历 key
Set<String> keySet = map.keySet();
for(String key : keySet) {
    System.out.println(key);    
}

// 遍历 value
Collection<Integer> values = map.values();
Iterator<Integer> iterator = values.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}

// 遍历key-value
Set<Map.Entry<String, Integer>> entrySet = map.entrySet();
Iterator<Map.Entry<String, Integer>> iterator = entrySet.iterator();
while (iterator.hasNext()) {
    Map.Entry<String, Integer> entry = iterator.next();
    System.out.println("key = " + entry.getKey() + ", value = " + entry.getValue()); 
}

2. 写出Iterator和增强for循环遍历List<String> 的代码, 使用上泛型
    List<String> list = new ArrayList<String>();
    list.add("AA"); ....

    // 使用Iterator
    Iterator<String> iterator = list.iterator();
    while (iterator.hasNext()) {
        System.out.println(iterator.next());
    }

    // 使用foreach(增强for)
    for (String str : list) {
        System.out.println(str);
    }

3. 提供一个方法, 用于遍历获取HashMap<String, String>中的所有value, 并存放在List中返回, 考虑上集合中泛型的使用;
public static List<String> getValueList(HashMap<String, String> map) {
	Collection<String> collection = map.values();
	List<String> list = new ArrayList<String>();
	for (String str : collection) {
		list.add(str);	
	}
	return list;
}

4. 创建一个与a.txt文件目录下的另外一个文件b.txt
public static void main(String[] args) {
	File file = new File("a.txt");

	File file2 = new File(file.getAbsoluteFile().getParent());
	
	File file3 = new File(file2, "b.txt");
	
	if (!file3.exists()) {
		file3.createNewFile();
		System.out.println("创建成功");
	}

}

5.Map 接口中的常用方法有哪些?
	增: put()
	删: remove()
	改: put();
	查: containsKey(), containsValue(),
    长度: int size();
	遍历: keySet(), entrySet(), values();
	
6. 流的介绍
    > 流的分类: 
        1. 操作的数据单位: 字符流, 字节流
        2. 数据的流向: 输入流, 输出流
        3. 流的角色: 节点流, 处理流
    > 流的体系结构
        抽象基类                节点流(文件流)              缓冲流
        InputStream             FileInputStream             BufferedInputStream
        OutputStream            FileOutputStream            BufferedOutputStream
        Reader                  FileReader                  BufferedReader
        Writer                  FileWriter                  BufferedWriter

    > 总结1: 
        1. 对于文本文件(.txt, .java, .c, .cpp, .cs), 使用字符流来处理.
        2. 对于非文本文件(.jpg, .mp3, .mp4, .avi, .doc, .ppt), 使用字节流来处理.

7. 缓冲流: 
    > 作用: 
        可以提高流的读取和写入速度.
    > 处理流: 就是"套接" 在已有的流的基础上.
