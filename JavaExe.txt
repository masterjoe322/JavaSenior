1. 如何遍历Map的key集, value集, key-value集, 使用上泛型
Map<String, Integer> map = new HashMap<String, Integer>();
map.put("AA", 123);....


// 遍历 key
Set<String> keySet = map.keySet();
for(String key : keySet) {
    System.out.println(key);    
}

// 遍历 value
Collection<Integer> values = map.values();
Iterator<Integer> iterator = values.iterator();
while (iterator.hasNext()) {
    System.out.println(iterator.next());
}

// 遍历key-value
Set<Map.Entry<String, Integer>> entrySet = map.entrySet();
Iterator<Map.Entry<String, Integer>> iterator = entrySet.iterator();
while (iterator.hasNext()) {
    Map.Entry<String, Integer> entry = iterator.next();
    System.out.println("key = " + entry.getKey() + ", value = " + entry.getValue()); 
}

2. 写出Iterator和增强for循环遍历List<String> 的代码, 使用上泛型
    List<String> list = new ArrayList<String>();
    list.add("AA"); ....

    // 使用Iterator
    Iterator<String> iterator = list.iterator();
    while (iterator.hasNext()) {
        System.out.println(iterator.next());
    }

    // 使用foreach(增强for)
    for (String str : list) {
        System.out.println(str);
    }

3. 提供一个方法, 用于遍历获取HashMap<String, String>中的所有value, 并存放在List中返回, 考虑上集合中泛型的使用;
public static List<String> getValueList(HashMap<String, String> map) {
	Collection<String> collection = map.values();
	List<String> list = new ArrayList<String>();
	for (String str : collection) {
		list.add(str);	
	}
	return list;
}

4. 创建一个与a.txt文件目录下的另外一个文件b.txt
public static void main(String[] args) {
	File file = new File("a.txt");

	File file2 = new File(file.getAbsoluteFile().getParent());
	
	File file3 = new File(file2, "b.txt");
	
	if (!file3.exists()) {
		file3.createNewFile();
		System.out.println("创建成功");
	}

}

5.Map 接口中的常用方法有哪些?
	增: put()
	删: remove()
	改: put();
	查: containsKey(), containsValue(),
    长度: int size();
	遍历: keySet(), entrySet(), values();
	
6. 流的介绍
    > 流的分类: 
        1. 操作的数据单位: 字符流, 字节流
        2. 数据的流向: 输入流, 输出流
        3. 流的角色: 节点流, 处理流
    > 流的体系结构
        抽象基类                节点流(文件流)              缓冲流
        InputStream             FileInputStream             BufferedInputStream
        OutputStream            FileOutputStream            BufferedOutputStream
        Reader                  FileReader                  BufferedReader
        Writer                  FileWriter                  BufferedWriter

    > 总结1: 
        1. 对于文本文件(.txt, .java, .c, .cpp, .cs), 使用字符流来处理.
        2. 对于非文本文件(.jpg, .mp3, .mp4, .avi, .doc, .ppt), 使用字节流来处理.
7. 一些流: 
    1. 缓冲流: 
        > 作用: 
            可以提高流的读取和写入速度.
        > 处理流: 就是"套接" 在已有的流的基础上.
    2. 转换流
        > 转换流: 属于字符流
            InputStreamReader : 将一个字节的输入流转换为字符的输入流
            OutputStreamWriter : 将一个字符的输出流转换为字节的输出流

        > 作用: 提供字节流到字符流的转换
        
        > 解码: 将字节, 字节数组 ---> 字符数组, 字符串...
          编码: 将字符数组, 字符串 ---> 字节, 字节数组.
        
        > 字符集

    3. 打印流: PrintStream & PrintWriter
        > 提供了一系列重载的print() 和println() 方法


    4. 数据流: DataInputSteam & DataOutputStream
        > 作用: 用于读取或写出基本数据类型的变量或字符串

8. 流的三种分类方式? 
    1. 按照传输的内容区分: 字符流(Reader, Writer), 字节流(InputStream, OutputStream)
    2. 按照功能分: 节点流, 处理流;
    3. 流向: 输入流, 输出流

9. 写出4个IO流中的抽象基类, 4个文件流, 4个缓冲流
    > 抽象基类: InputStream, OutputStream, Reader, Writer
    > 文件流:   FileInputStream, FileOutputStream, FileReader, FileWriter
    > 缓冲流:   BufferedInputStream, BufferedOutputStream, BufferedReader, BufferedWriter

10. 字节流和字符流的区别与使用情境.
    > 字节流操作的是字节, 字符流操作的是字符,
    > 方法不太好.

11. 使用缓冲流实现a.jpg文件复制为b.jpg文件的操作
    @Test
    public void test1() {
        
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        try {
            bis = new BufferedInputStream(new FileInputStream("a.jpg"));
            bos = new BufferedOutputStream(new FileOutputStream("b.jpg"));

            byte[] bytes = new byte[1024];
            int len;
            while ((len = bis.read(bytes)) != -1) {
                bos.write(bytes, 0, len);
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (bis != null) {
                    bis.close();
                }                
            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                if (bos != null) {
                    bos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

12. 转换流是哪两个类, 分别的作用是什么? 请分别创建两个类的对象
    > 转换流: InputStreamReader: 将字节输入流转换为, 字符输出流 
              OutputStreamWriter: 将字符输出流转换为, 字节输出流. 
    > InputStreamReader isr = new InputStreamReader(new FileInputStream("hello.txt"));
      OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("Hello1.txt"));

13. 对象流的使用: 
    > ObjectInputStream & ObjectOutputStream
    > 作用: 用于存储和读取基本数据类型数据或对象的处理流. 它的强大之处就是可以把Java中的对象写入到数据源, 并还原回来.

    序列化: 将内存中的Java对象保存到磁盘中, 或者通过网络传输出去.
        > 要想一个Java对象可序列化, 需要满足: 
            1. 实现接口Serializable, 或者Externalable
            2. 当前类提供一个全局常量: serialVersionUID
            3. 除了当前Person类需要实现Serializable接口之外, 还必须保证其内部所有属性也必须是可序列化的, (默认情况下, 基本数据类型可序列化);
        > 补充: 
            ObjectOutputStream 和 ObjectInputStream不能序列化static和transient修饰的成员变量.
        
        > 序列化机制: 
            对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流, 从而允许把这种二进制流持久地保存在磁盘上, 或通过网络将这种二进制流传输到另一个网络节点, 当其他程序获取了这种二进制流, 就可以恢复成为原来地Java对象.

14. 网络概述: 
    > 网络编程中的两个主要的问题:   
        > 如何准确的定位网络上一台或多台主机; 定位主机上的特定应用.
        > 找到主机后如何可靠高效地进行数据传输.

    > 网络编程中地两个要素: 
        > 对应问题1: IP和端口号.
        > 对应问题2: 提供网络通信协议: TCP/IP参考模型(应用层, 传输层, 网络层, 物理+数据链路层);

    > 通信要素: 
        > IP唯一的标识, Internet上地计算机(通信实体);
        > 在Java中使用InetAddress类来代表IP
        > Ip分类: IPV4, IPV6, 万维网和局域网.
        > 域名: www.baidu.com, www.mi.com, www.sina.com, www.jd.com, www.vip.com
        > 本地贿赂地址: 127.0.0.1 对应着: localhost
        > 如何实例话InetAddress: 
            > 使用两个方法: getByName(String host), getLocalHost();
            > 两个常用方法: getHostName() / getHostAddress(); 

        > 端口号: 正在计算机上运行的进程
            > 要求: 不同的进程有不同的端口号.
            > 范围: 被规定一个16位的整数0~65535

1. 一个IP对应着哪个类的一个对象? 实例化这个类的方式是? 两个常用的方法是? 
    > InetAddress
    > InetAddress.getByName(String host), InetAddress.getLocalHost(), 
    > getHost(), getHostName().

2. 传输层的TCP协议和UDP协议的主要区别是? 
    > TCP 三次握手, 比较可靠, 连接完毕后, 进行大数据量的传输. 效率低
    
    > UDP : 不可靠. 以数据包/报传输.数据报限定为64KB. 效率高

3. 什么是URL, 你能写一个URL吗? 
    > URL: 统一资源定位符:    
   
    URL url = new URL("http://192.168.14.100:8080/examples/Hello.jpg#a?username=master&password=pass");
    > http: 应用层的一个协议.

4. 谈谈你对对象序列化机制的理解.
    > 序列化: 实现Serialiable接口, 指定serialVersionUID以为了实现当本类进行更改时候, 还能再反序列化回来, 同时要求我们实现序列化接口的所有成员变量必须也是可序列化的, 基本数据类型默认就是可序列化的.(静态变量无法被序列化) 将一个对象保存成文件, 或者通过网络发送出去. 

5. 对象要想实现序列化, 需要满足哪几个条件.
    > 实现Serializable接口, 标识接口, 
    > 对象所在的类提供常量: serialVersionUID, 序列版本号.
    > 对象的属性也是可序列化的.(基本数据类型, String: 本身就是已经可序列化的);  

1. 写出Class实例的三种常见方式? 
    > Class clazz1 = String.class
    > Person person = new Person();
      Class clazz2 = person.getClass();
    > Class clazz3 = Class.forName(String classPath); // 体现出反射的动态性. 
    > Class.class.getClassLoader().load(String classPath);

2. 谈谈你对Class类的理解
    > Class实例对应着加载到内存中的一个运行时类. 

3. 创建Class对应的运行时类的对象的通用方法, 代码实现. 以及这样操作需要对应的运行时类构造器方面满足的要求.
    > 
    Object object = clazz.newInstance(); // 对应着运行时类的对象.
    // 必须要有一个空参的构造器, 权限修饰符(modifier) 需要是public(足够)的

4. 在工程或module的src下有名为"jdbc.properties"的配置文件, 文件内容为: name=Tom, 如何在程序中通过代码获取Tom这个变量值, 代码实现.